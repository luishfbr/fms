datasource db {
    provider = "sqlite"
    url      = "file:./dev.db"
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password      String?
    otpSecret     String?
    totpIsEnable  Boolean?  @default(false)
    image         String?
    accounts      Account[]
    sessions      Session[]
    sectors       Sector[]  @relation("UserSectors")
    role          String?   @default("user")
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

model Sector {
    id           String         @id @default(cuid())
    name         String         @unique
    users        User[]         @relation("UserSectors")
    FileTemplate FileTemplate[]

    @@map("sectors")
}

model FileTemplate {
    id        String   @id @default(cuid())
    url       String?
    modelName String?
    sectorId  String   @map("sector_id")
    sector    Sector   @relation(fields: [sectorId], references: [id], onDelete: Cascade)
    Fields    Fields[]

    @@map("fileTemplates")
}

model Fields {
    id             String       @id @default(cuid())
    shelf          String?
    box            String?
    folder         String?
    name           String?
    cpf            String?
    cnpj           String?
    registration   String?
    addData        String?
    logoutDate     String?
    month          String?
    year           String?
    description    String?
    fileTemplate   FileTemplate @relation(fields: [fileTemplateId], references: [id], onDelete: Cascade)
    fileTemplateId String       @map("fileTemplate_id")

    @@map("fields")
}

model Account {
    id                String   @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}
