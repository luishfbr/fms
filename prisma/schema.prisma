generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String   @id @default(cuid())
    name          String?
    email         String   @unique
    password      String?
    otpSecret     String?
    totpIsEnabled Boolean  @default(false)
    role          Role     @default(USER)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    accounts Account[]
    sessions Session[]
    sectors  Sector[]
}

enum Role {
    USER
    ADMIN
    CREATOR
}

model Sector {
    id   String @id @default(cuid())
    name String @unique

    users     User[]
    templates FileTemplate[]
}

model FileTemplate {
    id        String @id @default(cuid())
    modelName String
    sector    Sector @relation(onDelete: Cascade, fields: [sectorId], references: [id])

    fields   Field[]
    files    File[]
    sectorId String
}

model Field {
    id             String       @id @default(cuid())
    fieldType      FieldType
    fieldLabel     String
    fileTemplate   FileTemplate @relation(onDelete: Cascade, fields: [fileTemplateId], references: [id])
    fileTemplateId String
    File           File[]
}

enum FieldType {
    nomecompleto
    cpf
    cnpj
    datadeadmissao
    dataderecisao
    data
    dia
    mes
    ano
    prateleira
    caixa
    pasta
}

model File {
    id             String @id @default(cuid())
    value          String
    fileTemplateId String
    fieldId        String
    commonId       String

    field Field @relation(onDelete: Cascade, fields: [fieldId], references: [id])

    FileTemplate FileTemplate? @relation(fields: [fileTemplateId], references: [id])
}

model Account {
    id                String @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String

    user User @relation(onDelete: Cascade, fields: [userId], references: [id])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime

    user User @relation(onDelete: Cascade, fields: [userId], references: [id])
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}
